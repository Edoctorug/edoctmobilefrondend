/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package patientdoctorwebsockets;

import com.edoctorug.projectstructure.patientchat.constants.ConnectionParams;

import java.io.Console;
import java.io.IOException;
import java.util.Scanner;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ArrayList;
import patientdoctorwebsockets.Httpman;
import patientdoctorwebsockets.Models.*;
import patientdoctorwebsockets.Models.WSModels.*;

import java.time.Instant;
import java.time.LocalTime;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) 
    {
        /*
        Httpman http_man = new Httpman("127.0.0.1",8000); //register endpoint
        Httpman auth_man = new Httpman("127.0.0.1",8000);//,"/chatapp/auth/"); //login endpoint
        
        
        System.out.println(reg_model.toJson());
        //http_man.send(reg_model.toJson(), "/chatapp/register/");
        AuthModel auth_model = new AuthModel();
        auth_model.user_name = "mrblack";
        auth_model.user_password = "mrblack";

        String auth_data = auth_man.send(auth_model.toJson(),"/chatapp/auth/");//"/chatapp/register/"); //send auth to endpoint
        //System.out.println(auth_model.toJson());

        if(auth_data!=null)
        {
            
            AuthResponse parse_result = AuthResponse.deJson(auth_data);

            if(parse_result!=null)
            {
            System.out.println(parse_result.meta_data.names);
            System.out.println(parse_result.status_msg)
            ;
            }
        }
        */

        System.out.println("\t\tTesting Client Chat Interface");
        Hospitalman hospitalman = new Hospitalman(ConnectionParams.hospital_url, ConnectionParams.hospital_port);

        Scanner dash_scan = new Scanner(System.in); //app input scanner;

        System.out.print("Login (0) / Register (1): ");

        int action_1 = dash_scan.nextInt(); //get login or register reply
       //doctor test AuthModel auth_model = new AuthModel("mrblack","mrblack");
        
        
       if (action_1==0)
       {
        //maxy maxim --patient]
        System.out.print("\nYour username: ");
        Scanner uname_scan = new Scanner(System.in);
        String user_name = uname_scan.nextLine();
        //uname_scan.close();
        
        Scanner pass_scan = new Scanner(System.in);
        System.out.print("Your password: ");
        String user_pass = pass_scan.nextLine();

        //pass_scan.close();
        
        AuthModel auth_model = new AuthModel(user_name,user_pass);
        AuthResponse auth_response = hospitalman.auth(auth_model);
        //System.out.println("\n\t Login Reply: "+auth_response.status_msg);
        System.out.print("\nRegistered status: "+auth_response.status_msg);
        System.out.print("\nRegistered Names: "+auth_response.meta_data.names);
        System.out.print("\nRegistered Occupation: "+auth_response.meta_data.user_role);


       }
       else
       {
            RegistrationModel reg_model = new RegistrationModel();
            /*reg_model.first_name = "Mr";
            reg_model.last_name = "Black";
            reg_model.user_name = "mrblack";
            reg_model.user_password = "mrblack";
            reg_model.user_role = "doctor";
            */

            //mrmax mrmax doctor || mrdax mrdax patient
            System.out.print("\nYour first_name: ");
            Scanner fname_scan = new Scanner(System.in);
            String fname = fname_scan.nextLine();

            System.out.print("\nYour second_name: ");
            Scanner sname_scan = new Scanner(System.in);
            String sec_name = sname_scan.nextLine();

            System.out.print("\nYour user name: ");
            Scanner uname_scan = new Scanner(System.in);
            String user_name = uname_scan.nextLine();

            System.out.print("\nYour password: ");
            Scanner pass_scan = new Scanner(System.in);
            String pass_name = pass_scan.nextLine();

            System.out.print("\nUser Type Patient(0) / Doctor (1): ");
            Scanner tname_scan = new Scanner(System.in);
            int iuser_role = tname_scan.nextInt();
            String user_role  = "patient";
            if (iuser_role==1)
            {
                user_role = "doctor";
            }


            reg_model.first_name = fname;
            reg_model.last_name = sec_name;
            reg_model.user_name = user_name;
            reg_model.user_password = pass_name;
            reg_model.user_role = user_role;

            AuthResponse reg_status = hospitalman.register(reg_model);
            System.out.println("\nRegistered status: "+reg_status.status_msg);
            System.out.println("\nRegistered Names: "+reg_status.meta_data.names);
            System.out.println("\nRegistered Occupation: "+reg_status.meta_data.user_role);
       }
        
        WSAuthModel ws_authmodel = new WSAuthModel();
        /*
        ws_authmodel.cmd = "auth";
        ws_authmodel.message = "hello";
        ws_authmodel.meta = new WSSessionModel();
        */

       WSmanCB wSmanCB = new WSmanCB();
       WSRouter wsRouter = new WSRouter();
       wSmanCB.setActiveRouter(wsRouter);
       hospitalman.authWebSocket(wSmanCB); //setup websocket endpoint
       hospitalman.findOnlineDoc();
       ResponseModel latest_response = wsRouter.start();
       String status_msg = latest_response.status_msg;

       System.out.println("\t\tPrinting message: "+status_msg+"\n\n");

       //LinkedHashMap<String,String> this_chat = (LinkedHashMap)latest_response.meta_data;
       
       ChatDetails xchat_details = ChatDetails.deJson((LinkedHashMap)latest_response.meta_data);
       String chat_uuid = xchat_details.chat_uuid;
       //this_chat.get("chat_uuid");
       System.out.println("\t\tStarted chat with UUID: "+chat_uuid);
       while(true)
       {
            System.out.print("Command Message: ");
            Scanner scan_cmd = new Scanner(System.in);
            String cmd = scan_cmd.nextLine();

            switch(cmd)
            {
                case "1998":
                   // 
                   long epoch_milli = Instant.now().getEpochSecond();
                   System.out.print("Write Appointmetn: ");
                    Scanner scan_note = new Scanner(System.in);
                    String a_note = scan_note.nextLine();
                    
                   hospitalman.makeAppointment(chat_uuid, a_note,epoch_milli,LocalTime.now());
                break;

                case "1999":
                    System.out.println("\t\t\tGetting appointments");
                    hospitalman.getAppointments();
                    ResponseModel appointments_latest_response = wsRouter.start();
                    AppointmentsHistory appointment_latest_response_obj = AppointmentsHistory.deJson((LinkedHashMap)appointments_latest_response.meta_data);
                    for(AppointmentDetails appointment_details: appointment_latest_response_obj.appointments_history)
                    {
                        String appointment_with = appointment_details.appointment_with;
                        String appointment_time = appointment_details.appointment_time;
                        String appointment_uuid = appointment_details.appointment_uuid;
                        String appointment_note = appointment_details.appointment_note;
                        System.out.println("appointment with: "+appointment_with+ " at "+appointment_time+ " with uuid: "+appointment_uuid+" with note: "+appointment_note);
                    }
                break;

                case "2000":
                    System.out.println("\t\t\tGetting Chat History");
                    hospitalman.getChatHistory();
                    
                    ResponseModel history_latest_response = wsRouter.start();
                    ChatsHistory latest_response_obj = ChatsHistory.deJson((LinkedHashMap)history_latest_response.meta_data);
                    //ChatsList chat_lists = ChatsList.deJson((LinkedHashMap)latest_response_obj.chat_history);
                    for(ChatsList chat_list: latest_response_obj.chat_history)
                    {
                        String summary_name = chat_list.summary.full_names;
                        String summary_time = chat_list.summary.chat_time;
                        String summary_uuid = chat_list.summary.chat_uuid;
                        System.out.println("chat list: "+summary_name+ " at "+summary_time);
                    }
                break;

                case "2001":
                   // make record
                   System.out.print("\t\t\tSave Record");
                   
                   System.out.print("Write Record Title: ");
                   Scanner scan_rtitle = new Scanner(System.in);
                   String rtitle = scan_rtitle.nextLine();

                   Scanner scan_rdetails = new Scanner(System.in);
                   String rdetails = scan_rdetails.nextLine();
                    
                   hospitalman.saveRecord(chat_uuid,rtitle,rdetails);
                break;
                case "2002":
                    System.out.println("\t\t\tGetting Records");
                    hospitalman.getRecords();
                    ResponseModel record_latest_response = wsRouter.start();

                    if(record_latest_response.status_code==200)
                    {
                    RecordsHistory records_latest_response_obj = RecordsHistory.deJson((LinkedHashMap)record_latest_response.meta_data);
                    for(RecordDetails record_details: records_latest_response_obj.records_history)
                    {
                        String record_title = record_details.record_title;
                        String record_time = record_details.record_time;
                        String record_uuid = record_details.record_uuid;
                        String record_note = record_details.record_details;
                        System.out.println("Title: "+record_title+ " at "+record_time+ " with uuid: "+record_uuid+" with note: "+record_note);
                    }
                    }
                break;

                case "2003":
                   // make record
                   System.out.print("\t\t\tCreate Order");
                   List<OrderItemModel> cart = new ArrayList<OrderItemModel>();
                   System.out.print("Order Sku: ");
                   Scanner scan_sku = new Scanner(System.in);
                   String sku = scan_sku.nextLine();
                   System.out.print("\n\nItem Quantity: ");
                   Scanner scan_no = new Scanner(System.in);
                   String quantity = scan_no.nextLine();

                   cart.add(new OrderItemModel(sku,Integer.parseInt(quantity)));
                    
                   hospitalman.makeOrder(cart.toArray(new OrderItemModel[0]));
                break;

                case "2004":
                    System.out.println("\t\t\tGetting Records");
                    hospitalman.getPrescriptions();
                    ResponseModel prescription_latest_response = wsRouter.start();

                    if(prescription_latest_response.status_code==200)
                    {
                    PrescriptionsHistory prescriptions_latest_response_obj = PrescriptionsHistory.deJson((LinkedHashMap)prescription_latest_response.meta_data);
                    for(PrescriptionDetails prescription_details: prescriptions_latest_response_obj.prescriptions_history)
                    {
                        String prescription_by = prescription_details.prescribed_by;
                        String prescription_for = prescription_details.prescribed_for;
                        String prescription_id = prescription_details.prescription_id;
                        String prescription_note = prescription_details.prescription_note;
                        String prescription_date = prescription_details.prescription_date;
                        System.out.println("Title: "+prescription_by+ " at "+prescription_date+ " with uuid: "+prescription_id+" and note: "+prescription_note);
                    }
                    }
                break;

                case "2005":
                   // make record
                   System.out.print("\t\t\tSave Prescription");
                   
                   System.out.print("\n\n\tmedicine Name: ");
                   Scanner scan_med = new Scanner(System.in);
                   String med = scan_med.nextLine();

                   System.out.print("\n\n\tmedicine dosage: ");
                   Scanner scan_dose = new Scanner(System.in);
                   String dose = scan_dose.nextLine();
                    
                   hospitalman.makePrescription(chat_uuid,med,dose);
                break;

                default:
                    System.out.print("Write Message: ");
                    Scanner scan_msg = new Scanner(System.in);
                    String msg = scan_msg.nextLine();
                    hospitalman.chatWebSocket(msg,chat_uuid);
                    wsRouter.start();
                    scan_msg.reset();
                    scan_cmd.reset();
                break;

            }
            
       }
        

        
        
        /*
        String message = scanner_obj.nextLine();

        
        System.out.println("^: "+message);
        
        
        */

        
        //WSman ws_man = new WSman(null, null);
    }
}
